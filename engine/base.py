
import math


class CalculatorParameterException(Exception):
    pass


class LaunchCalculator(object):

    #   ---------------------------------------------------------------------------------------------------------
    #   NOTE:   ALL values are in standard units (kilometers, meters, etc)
    #   ---------------------------------------------------------------------------------------------------------

    EARTH_MEAN_RADIUS = 6371000     # m

    GRAVITY_SEA_LEVEL = 9.80665     # m/s^2

    def __init__(self, **kwargs):

        # KWARGS:
        #   thrust (N)      : Thrust in newtons generated by the rocket
        #   weight (Kg)     : Weight of the entire platform in kilograms
        #   mass (Kg)       : Mass of the rocket (If only weight given, will calculate based on gravity at sea level)
        #   area (m^2)      : Cross sectional area of the largest part of the rocket (usually a circle)
        #   initial_y (m)   : Initial altitude of rocket when launched (sea level is 0m)
        #   burn_time (s)   : Time that the rocket's engine is burning / expelling exhaust and producing thrust

        self.weight = None
        self.mass = None
        self.initial_y = 0.0

        try:
            self.thrust = float(kwargs.get('thrust'))
            self.area = float(kwargs.get('area'))
            self.burn_time = float(kwargs.get('burn_time'))
        except Exception as e:
            raise CalculatorParameterException(e.message)

        if 'initial_y' in kwargs:
            self.initial_y = float(kwargs.get('initial_y'))

        if 'mass' in kwargs:
            self.mass = float(kwargs.get('mass'))

        elif 'weight' in kwargs:
            self.mass = float(kwargs.get('weight')) / self.GRAVITY_SEA_LEVEL

        else:
            raise CalculatorParameterException('Either mass or weight has to be specified in parameters.')

    def gravity_at_altitude(self, height):
        """
        Calculates the acceleration due to gravity at the given height.
        NOTE: This calculation assumes that the earth is a perfect sphere (which it is not)
        :param height: in meters
        :return:
        """
        new_height_square = math.pow(self.EARTH_MEAN_RADIUS / (self.EARTH_MEAN_RADIUS + float(height)), 2)
        gravity = self.GRAVITY_SEA_LEVEL * new_height_square
        return gravity

    def lift_at_air_density(self, air_density, speed, wing_area, lift_coefficient):
        """
        The Lift Equation.
        Calculates the amount of lift required for any flying object in a given air density (Relative to altitude).
        :param air_density: at the given altitude / in the given environment
        :param speed: of the aircraft
        :param wing_area: Surface area of the wing of the aircraft
        :param lift_coefficient: of the aircraft
        :return:
        """
        speed2 = math.pow(speed, 2)
        required_lift = float(0.5 * air_density * speed2 * wing_area * lift_coefficient)
        return required_lift




if __name__ == "__main__":
    calculator = LaunchCalculator(thrust=17792.8864, burn_time=8.0, mass=14.80118, area=0.129717, initial_y=6095.9998)
    print calculator.gravity_at_altitude(6095.9998)